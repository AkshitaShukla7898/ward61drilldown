(function (d3$1) {
  'use strict';

  const svg = d3$1.select('svg');
  const transitionDuration = 500;
  const width = document.body.clientWidth;
  const height = document.body.clientHeight;
  console.log(width,height);
  let active = d3.select(null);
  svg.attr('width', width).attr('height', height);
  const g = svg.append('g');
  const mercator = d3$1.geoMercator().scale(20000).translate([width/2, height/2]).center([73,19.7]);
  const pathGenerator = d3$1.geoPath().projection(mercator);
  //Zoom
    let zzoom = d3.zoom().scaleExtent([1, 2]).on("zoom", zoomed);

    function zoomed() {
    g.style("stroke-width", 1 / d3.event.transform.k + "px");
    g.attr("transform", d3.event.transform); // updated for d3 v4
  }
  //makemap
  const makemap = (geojson) => {
    	let path = g.selectAll('path').data(geojson)
  								.enter().append('path')
    							.attr('d',pathGenerator)
      						.attr('class','boundary');
    //zoomToBoundingBox
    const zoomToBoundingBox = d => {
    let bounds = pathGenerator.bounds(d),
        dx = bounds[1][0] - bounds[0][0],
        dy = bounds[1][1] - bounds[0][1],
        x = (bounds[0][0] + bounds[1][0]) / 2,
        y = (bounds[0][1] + bounds[1][1]) / 2,
        scale = Math.max(1, Math.min(10, .81/ Math.max(dx / width, dy / height))),
        translate = [width / 2 - scale * x, height / 2 - scale * y];
      svg.transition().duration(transitionDuration).call(
    	zzoom.transform, d3.zoomIdentity.translate(translate[0],translate[1]).scale(scale)
      );

    };
    //clicked
  	const clicked = d =>{
  d3.json('static/cluster.json').then(projectGeoJSON =>{
  let projectgeojson = projectGeoJSON.features;
    console.log(d);
    zoomToBoundingBox(d);
  	let selectedBlock = d.properties.region;
    let selectedjson = selectMap(projectgeojson,selectedBlock);
    g.selectAll("*").remove();
    makemap(selectedjson);
  });

  	};

    path.on('click',clicked);
  };

  //selectmap
  const selectMap = (geojson,location) => {
    		let selection = [];
    		geojson.forEach( sel =>{
        	if (sel.properties.region == location){
          	selection.push(sel);
          }
        });
    		return selection;
  };


  d3.json('static/region.json').then(json =>{
    console.log(json)
    makemap(json.features);
    d3.select('button').on('click',function(){
    g.selectAll("*").remove();
    svg.transition().duration(transitionDuration).call( zzoom.transform, d3.zoomIdentity );
    makemap(json.features);
  });
  });

  const readGeoJSON = (filename) => {
    let a;
  let json = d3.json(`${filename}`).then(json =>{
    a=  json.features;
  });
  console.log(a);
  };

  let features = readGeoJSON('static/cluster.json');

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,